name: Build Executables

on:
  push:
    tags:
      - 'v*'  # 添加标签触发条件，匹配 v1.0.0 这样的标签
  workflow_dispatch:  # 添加手动触发功能
    inputs:
      reason:
        description: '触发构建的原因'
        required: false
        default: '手动触发构建'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel  # 确保有wheel支持
        pip install -r requirements.txt
        
    - name: Verify PyQt5 installation
      run: |
        # 使用英文输出，避免编码问题
        python -c "import PyQt5; from PyQt5 import QtCore; print('PyQt5 version:', QtCore.PYQT_VERSION_STR)"
    
    - name: Check cursor_pro_gui.py
      run: |
        # 检查cursor_pro_gui.py文件是否存在
        if (Test-Path cursor_pro_gui.py) {
          echo "cursor_pro_gui.py exists"
        } else {
          echo "ERROR: cursor_pro_gui.py does not exist!"
          Get-ChildItem
          exit 1
        }
        
    - name: Build EXE (CLI Version)
      run: |
        pyinstaller CursorKeepAlive.spec
        
    - name: Build EXE (GUI Version)
      run: |
        # 创建新的spec文件 - 确保包含所有必要的 PyQt5 子模块
        echo "# -*- mode: python ; coding: utf-8 -*-" > CursorProGUI.spec
        echo "block_cipher = None" >> CursorProGUI.spec
        echo "a = Analysis(['cursor_pro_gui.py'], pathex=['.'], binaries=[], datas=[], hiddenimports=['PyQt5', 'PyQt5.QtCore', 'PyQt5.QtWidgets', 'PyQt5.QtGui', 'PyQt5.sip'], hookspath=[], runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False)" >> CursorProGUI.spec
        echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> CursorProGUI.spec
        echo "exe = EXE(pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [], name='CursorProGUI', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, upx_exclude=[], runtime_tmpdir=None, console=True)" >> CursorProGUI.spec
        
        # 设置环境变量 - 使用英文输出避免编码问题
        python -c "import os, sys; import PyQt5; from PyQt5 import QtCore; plugins_dir = os.path.join(os.path.dirname(PyQt5.__file__), 'Qt5', 'plugins'); print('Setting QT_PLUGIN_PATH=' + plugins_dir); os.environ['QT_PLUGIN_PATH'] = plugins_dir if os.path.exists(plugins_dir) else ''"
        pyinstaller --clean CursorProGUI.spec -v
        
    - name: Upload Windows CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorPro-Windows
        path: dist/CursorPro.exe
        
    - name: Upload Windows GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorProGUI-Windows
        path: dist/CursorProGUI.exe

  build-macos-arm64:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        
        # macOS需要一些基本的X11组件以支持PyQt5
        brew install pkg-config
        
        # 安装依赖 - 通过多种方式尝试安装PyQt5
        pip install -r requirements.txt
        
        # 备用方案：尝试通过PyQtWebEngine安装PyQt5
        pip install --only-binary=:all: PyQtWebEngine
        
    - name: Verify PyQt5 installation
      run: |
        # 使用英文输出，避免编码问题
        python -c "import PyQt5; from PyQt5 import QtCore; print('PyQt5 version:', QtCore.PYQT_VERSION_STR)"
    
    - name: Check cursor_pro_gui.py
      run: |
        # 检查cursor_pro_gui.py文件是否存在
        if [ -f cursor_pro_gui.py ]; then
          echo "cursor_pro_gui.py exists"
        else
          echo "ERROR: cursor_pro_gui.py does not exist!"
          ls -la
          exit 1
        fi
        
    - name: Build MacOS ARM executable (CLI Version)
      run: |
        pyinstaller CursorKeepAlive.spec
        
    - name: Build MacOS ARM executable (GUI Version)
      run: |
        # 创建新的spec文件 - 确保包含所有必要的 PyQt5 子模块
        echo "# -*- mode: python ; coding: utf-8 -*-" > CursorProGUI.spec
        echo "block_cipher = None" >> CursorProGUI.spec
        echo "a = Analysis(['cursor_pro_gui.py'], pathex=['.'], binaries=[], datas=[], hiddenimports=['PyQt5', 'PyQt5.QtCore', 'PyQt5.QtWidgets', 'PyQt5.QtGui', 'PyQt5.sip'], hookspath=[], runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False)" >> CursorProGUI.spec
        echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> CursorProGUI.spec
        echo "exe = EXE(pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [], name='CursorProGUI', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, upx_exclude=[], runtime_tmpdir=None, console=True)" >> CursorProGUI.spec
        
        # 设置环境变量 - 使用英文输出避免编码问题
        python -c "import os, sys; import PyQt5; from PyQt5 import QtCore; plugins_dir = os.path.join(os.path.dirname(PyQt5.__file__), 'Qt5', 'plugins'); print('Setting QT_PLUGIN_PATH=' + plugins_dir); os.environ['QT_PLUGIN_PATH'] = plugins_dir if os.path.exists(plugins_dir) else ''"
        pyinstaller --clean CursorProGUI.spec -v
        
    - name: Upload MacOS ARM CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorPro-MacOS-ARM64
        path: dist/CursorPro
        
    - name: Upload MacOS ARM GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorProGUI-MacOS-ARM64
        path: dist/CursorProGUI

  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel  # 确保有wheel支持
        
        # 安装 Qt 依赖库 (Linux 特有)
        sudo apt-get update
        sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 libxcb-cursor0
        
        pip install -r requirements.txt
        
    - name: Verify PyQt5 installation
      run: |
        # 使用英文输出，避免编码问题
        python -c "import PyQt5; from PyQt5 import QtCore; print('PyQt5 version:', QtCore.PYQT_VERSION_STR)"
    
    - name: Check cursor_pro_gui.py
      run: |
        # 检查cursor_pro_gui.py文件是否存在
        if [ -f cursor_pro_gui.py ]; then
          echo "cursor_pro_gui.py exists"
        else
          echo "ERROR: cursor_pro_gui.py does not exist!"
          ls -la
          exit 1
        fi
        
    - name: Build Linux executable (CLI Version)
      run: |
        pyinstaller CursorKeepAlive.spec
        
    - name: Build Linux executable (GUI Version)
      run: |
        # 创建新的spec文件 - 确保包含所有必要的 PyQt5 子模块
        echo "# -*- mode: python ; coding: utf-8 -*-" > CursorProGUI.spec
        echo "block_cipher = None" >> CursorProGUI.spec
        echo "a = Analysis(['cursor_pro_gui.py'], pathex=['.'], binaries=[], datas=[], hiddenimports=['PyQt5', 'PyQt5.QtCore', 'PyQt5.QtWidgets', 'PyQt5.QtGui', 'PyQt5.sip'], hookspath=[], runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False)" >> CursorProGUI.spec
        echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> CursorProGUI.spec
        echo "exe = EXE(pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [], name='CursorProGUI', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, upx_exclude=[], runtime_tmpdir=None, console=True)" >> CursorProGUI.spec
        
        # 设置环境变量 - 使用英文输出避免编码问题
        python -c "import os, sys; import PyQt5; from PyQt5 import QtCore; plugins_dir = os.path.join(os.path.dirname(PyQt5.__file__), 'Qt5', 'plugins'); print('Setting QT_PLUGIN_PATH=' + plugins_dir); os.environ['QT_PLUGIN_PATH'] = plugins_dir if os.path.exists(plugins_dir) else ''"
        pyinstaller --clean CursorProGUI.spec -v
        
    - name: Upload Linux CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorPro-Linux
        path: dist/CursorPro
        
    - name: Upload Linux GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorProGUI-Linux
        path: dist/CursorProGUI

  build-macos-intel:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        arch -x86_64 pip3 install --upgrade pip
        arch -x86_64 pip3 install wheel
        
        # macOS需要一些基本的X11组件以支持PyQt5
        arch -x86_64 brew install pkg-config
        
        # 安装依赖 - 通过多种方式尝试安装PyQt5
        arch -x86_64 pip3 install -r requirements.txt
        
        # 备用方案：尝试通过PyQtWebEngine安装PyQt5
        arch -x86_64 pip3 install --only-binary=:all: PyQtWebEngine
    
    - name: Verify PyQt5 installation
      run: |
        # 使用英文输出，避免编码问题
        arch -x86_64 python3 -c "import PyQt5; from PyQt5 import QtCore; print('PyQt5 version:', QtCore.PYQT_VERSION_STR)"
    
    - name: Check cursor_pro_gui.py
      run: |
        # 检查cursor_pro_gui.py文件是否存在
        if [ -f cursor_pro_gui.py ]; then
          echo "cursor_pro_gui.py exists"
        else
          echo "ERROR: cursor_pro_gui.py does not exist!"
          ls -la
          exit 1
        fi

    - name: Build MacOS Intel executable (CLI Version)
      env:
        TARGET_ARCH: 'x86_64'
      run: |
        arch -x86_64 python3 -m PyInstaller CursorKeepAlive.spec
        
    - name: Build MacOS Intel executable (GUI Version)
      env:
        TARGET_ARCH: 'x86_64'
      run: |
        # 创建新的spec文件 - 确保包含所有必要的 PyQt5 子模块
        echo "# -*- mode: python ; coding: utf-8 -*-" > CursorProGUI.spec
        echo "block_cipher = None" >> CursorProGUI.spec
        echo "a = Analysis(['cursor_pro_gui.py'], pathex=['.'], binaries=[], datas=[], hiddenimports=['PyQt5', 'PyQt5.QtCore', 'PyQt5.QtWidgets', 'PyQt5.QtGui', 'PyQt5.sip'], hookspath=[], runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False)" >> CursorProGUI.spec
        echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> CursorProGUI.spec
        echo "exe = EXE(pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [], name='CursorProGUI', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, upx_exclude=[], runtime_tmpdir=None, console=True)" >> CursorProGUI.spec
        
        # 设置环境变量 - 使用英文输出避免编码问题
        arch -x86_64 python3 -c "import os, sys; import PyQt5; from PyQt5 import QtCore; plugins_dir = os.path.join(os.path.dirname(PyQt5.__file__), 'Qt5', 'plugins'); print('Setting QT_PLUGIN_PATH=' + plugins_dir); os.environ['QT_PLUGIN_PATH'] = plugins_dir if os.path.exists(plugins_dir) else ''"
        arch -x86_64 python3 -m PyInstaller --clean CursorProGUI.spec -v
        
    - name: Upload MacOS Intel CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorPro-MacOS-Intel
        path: dist/CursorPro
        
    - name: Upload MacOS Intel GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: CursorProGUI-MacOS-Intel
        path: dist/CursorProGUI

  create-release:
    needs: [build-windows, build-macos-arm64, build-linux, build-macos-intel]
    runs-on: ubuntu-22.04
    # 当有标签推送或手动触发时创建发布
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create release archives
        run: |
          cd artifacts
          zip -r CursorPro-Windows.zip CursorPro-Windows/
          zip -r CursorProGUI-Windows.zip CursorProGUI-Windows/
          zip -r CursorPro-MacOS-ARM64.zip CursorPro-MacOS-ARM64/
          zip -r CursorProGUI-MacOS-ARM64.zip CursorProGUI-MacOS-ARM64/
          zip -r CursorPro-Linux.zip CursorPro-Linux/
          zip -r CursorProGUI-Linux.zip CursorProGUI-Linux/
          zip -r CursorPro-MacOS-Intel.zip CursorPro-MacOS-Intel/
          zip -r CursorProGUI-MacOS-Intel.zip CursorProGUI-MacOS-Intel/

      - name: Set release tag for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RELEASE_TAG=manual-build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && env.RELEASE_TAG || github.ref }}
          name: ${{ github.event_name == 'workflow_dispatch' && format('手动构建 {0}', env.RELEASE_TAG) || github.ref_name }}
          files: |
            artifacts/CursorPro-Windows.zip
            artifacts/CursorProGUI-Windows.zip
            artifacts/CursorPro-MacOS-ARM64.zip
            artifacts/CursorProGUI-MacOS-ARM64.zip
            artifacts/CursorPro-Linux.zip
            artifacts/CursorProGUI-Linux.zip
            artifacts/CursorPro-MacOS-Intel.zip
            artifacts/CursorProGUI-MacOS-Intel.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}